/*----------------------------------------------*/
/* DreamsCore - Everything smooth, as intented. */
/*     (Inspired by CzechHek's Core.lib)        */
/*                                              */
/* WARNING: I USED 1.12.2 FORGE API TO DO THIS  */
/* CORE. SOMETHING WONT WORK ON CROSS-VERSION.  */
/* WARNING: I USED 1.12.2 FORGE API TO DO THIS  */
/* CORE. SOMETHING WONT WORK ON CROSS-VERSION.  */
/* WARNING: I USED 1.12.2 FORGE API TO DO THIS  */
/* CORE. SOMETHING WONT WORK ON CROSS-VERSION.  */
/*----------------------------------------------*/

/*---------------------*/
/*      CREDITS        */
/*    1: CzechHek      */
/*   2: scorpion3013   */
/*   3: Beast(turtl)   */
/*     4: ChocoPie     */
/*      5: mems        */
/*    6: Sonya_ADM     */
/* 7:guys from discord */
/*     8: yorik100     */
/*     9: and me...    */
/*---------------------*/

var coreVersion = "3.17", coreAutoUpdate, scriptAutoUpdate, module, command, _AdaptedModule, scriptName, scriptVersion, scriptAuthor;
(API_V2 = !_AdaptedModule) && (_AdaptedModule = undefined);

function registerModule(m) {
    if (!Object.keys(m).length) return;
    _settings = {}; toArray(m.values).forEach(function (v) {_settings[v.getName()] = !API_V2 && v instanceof _AdaptedValue ? v.getValue() : v});

    script.registerModule({
        name: m.name || (API_V2 ? script.scriptName : "Module"),
        category: _categories.add(m.category || "DreamsCore"),
        description: m.description || "",
        settings: _settings
    }, function (module) {
        m.onEnable && module.on("enable", function () m.onEnable());
        m.onDisable && module.on("disable", function () m.onDisable());
        m.onUpdate && module.on("update", function () m.onUpdate());
        m.onMotion && module.on("motion", function (e) m.onMotion(e));
        m.onRender2D && module.on("render2D", function (e) m.onRender2D(e));
        m.onRender3D && module.on("render3D", function (e) m.onRender3D(e));
        m.onAttack && module.on("attack", function (e) m.onAttack(e));
        m.onJump && module.on("jump", function (e) m.onJump(e));
        m.onPacket && module.on("packet", function (e) m.onPacket(e));
        m.onKey && module.on("key", function (e) m.onKey(e));
        m.onMove && module.on("move", function (e) m.onMove(e));
        m.onStep && module.on("step", function (e) m.onStep(e));
        m.onStepConfirm && module.on("stepConfirm", function () m.onStepConfirm());
        m.onWorld && module.on("world", function (e) m.onWorld(e));
        m.onSession && module.on("session", function () m.onSession());
        m.onClickBlock && module.on("clickBlock", function (e) m.onClickBlock(e));
        m.onStrafe && module.on("strafe", function (e) m.onStrafe(e));
        m.onSlowDown && module.on("slowDown", function (e) m.onSlowDown(e));
        m.onClickGuiOpen && module.on("clickGuiOpen", function () m.onClickGuiOpen());
        m.onClickGuiClosed && module.on("clickGuiClosed", function () m.onClickGuiClosed());
        m.onClickGuiLoaded && module.on("clickGuiLoaded", function () m.onClickGuiLoaded());
    });
}

function registerCommand(c) {
    if (!Object.keys(c).length) return;

    script.registerCommand(_command = {
        name: c.name || (c.commands && c.commands.length ? c.commands[0] : API_V2 ? script.scriptName || "Command" : "Command"),
        aliases: c.commands || []
    }, function (command) {
        c.onExecute && command.on("execute", function (a) {
            _prefix = commandManager.prefix;
            a = Java.from(a).map(function (a, i) a.toLowerCase().replace(!i ? _prefix : "", ""));
            _error = null; _lastIndex = -1; _lastObject = null;
            (_object = c.subcommands) && a.some(function (arg, i) {
                if (i) {
                    if ((_object = _object[arg]) instanceof Object) _lastIndex = i + 1, _lastObject = _object;
                    else if (_object === undefined && (!~_lastIndex || i <= _lastIndex)) return _error = [arg, a.slice(0, _lastIndex), _lastObject || c.subcommands];
                }
            });

            if (_object || _error) {
                print(typeof _object, _error);
                print("");
                a.length == 1 && print("§8▏§7§l", command.getCommand(), "§8v§l" + (c.version || script.scriptVersion), "§7by§8§l", toArray(c.author || Java.from(script.scriptAuthors)).join("§7, §8§l"));
                _object ? _object instanceof Object ? (print("§8▏ §7Valid subcommands§8: (§7§l" + Object.keys(_object).length + "§8)"), print("§8▏§f", _prefix + a.join(" "), "§8[§f" + Object.keys(_object).join("§7, §f") + "§8]")) : print("§8▏ §7Usage§8:§f", _prefix + a.join(" "), "„§7" + _object + "§f“") : (print("§4▏ §cInvalid argument§4:§c", _prefix + a.join(" ").replace(_error[0], "„§4§l" + _error[0] + "§c“")), print("§8▏ §7Valid subcommands§8: (§7§l" + Object.keys(_error[2]).length + "§8)"), print("§8▏§f", _prefix + _error[1].join(" "), "§8[§f" + Object.keys(_error[2]).join("§7, §f") + "§8]"));
                a.length == 1 && c.commands.length > 1 && (print("§8▏ §7Available aliases§8: (§7§l" + (c.commands.length - 1) + "§8)"), print("§8▏§f", _prefix + c.commands.map(function (e) e.toLowerCase()).filter(function (e) e != a[0]).join("§7, §f" + _prefix)));
            } else c.onExecute(a);
        });
    });
}

/*------------------*/
/* Custom functions */
/*   By CzechHek    */
/*------------------*/

function isMovingHorizontally(entity) entity && entity != mc.thePlayer ? entity.lastTickPosX != entity.posX || entity.lastTickPosZ != entity.posZ : !!(mc.thePlayer.movementInput.moveForward || mc.thePlayer.movementInput.moveStrafe);

function isMovingVertically(entity) entity && entity != mc.thePlayer ? entity.lastTickPosY != entity.posY : mc.thePlayer.movementInput.jump || mc.thePlayer.movementInput.sneak;

function isMoving(entity) isMovingHorizontally(entity) || isMovingVertically(entity);

function isInputHorizontally() Keyboard.isKeyDown(mc.gameSettings.keyBindForward.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindLeft.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindBack.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindRight.getKeyCode());

function isInputVertically() Keyboard.isKeyDown(mc.gameSettings.keyBindJump.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindSneak.getKeyCode());

function move(horizontal, vertical, timer, event, ignoreInput) {
    horizontal = ignoreInput ? horizontal : isInputHorizontally() ? horizontal : 0;
    vertical = ignoreInput ? vertical : isInputHorizontally() ? vertical : null;
    yaw = MovementUtils.getDirection();
    timer != null && timer > 0 && (mc.timer.timerSpeed = timer);
    horizontal != null && ((mc.thePlayer.motionX = -Math.sin(yaw) * horizontal, mc.thePlayer.motionZ = Math.cos(yaw) * horizontal), (event && (event.setX(mc.thePlayer.motionX), event.setZ(mc.thePlayer.motionZ))));
    vertical != null && ((mc.thePlayer.motionY = vertical), (event && event.setY(vertical)));
}

function interval(ms, func) (_timer = new Timer("setInterval", true), _timer.schedule(func, 0, ms), _timer);

function timeout(ms, func) (_timer = new Timer("setTimeout", true), _timer.schedule(func, ms), _timer);

function setValues(module, values) {
    if (!(module instanceof ScriptModule)) return
    _valuesMap = new LinkedHashMap();
    toArray(values).forEach(function (v, i) {_valuesMap.put(i, v instanceof Value ? v : v.getValue())});
    getField(module, "_values").set(module, _valuesMap); _valuesMap = undefined;
}

function getValues(module) Java.from(module.values);

function getNearestTarget(entityType, fromEntity) Java.from(mc.theWorld.loadedEntityList).filter(function (e) e != mc.thePlayer && entityType ? e instanceof entityType : EntityUtils.isSelected(e, true)).sort(function (a, b) (entity = fromEntity || mc.thePlayer).getDistanceToEntity(a) - entity.getDistanceToEntity(b))[0];

function getPlayer(nick) Java.from(mc.theWorld.playerEntities).find(function (e) StringUtils.stripControlCodes(e.getName()).equals(nick));

function rand(min, max) (Array.isArray(min) && (max = min[1], min = min[0]), Math.random() * (max - min) + min);

function getDurability(itemStack) itemStack && itemStack.getMaxDamage() - itemStack.getItemDamage();

function getAttackDamage(stack) stack && (item = stack.getItem()) && (item instanceof ItemSword || item instanceof ItemTool) ? Java.from(item.getItemAttributeModifiers().get("generic.attackDamage"))[0].getAmount() + 1.25 * ItemUtils.getEnchantment(stack, Enchantment.sharpness) : -1;

print = (Chat = chat = {print: function () {ClientUtils.displayChatMessage(Array.prototype.slice.call(arguments).join(" "))}}).print;

function showMessage(text, title, alwaysOnTop, type)
    new Thread(new Runnable({
        run: function () {
            (dialog = new JOptionPane(text || "", type || JOptionPane.INFORMATION_MESSAGE).createDialog(title || "")).setAlwaysOnTop(alwaysOnTop != null ? alwaysOnTop : true);
            dialog.setVisible(true);
        }
    })).start();

function getMethod(clazz, methodName) ((_method = Java.from((clazz instanceof Class ? clazz : clazz.class).getDeclaredMethods()).find(function (m) m.getName() == methodName)).setAccessible(true), _method);

function getField(clazz, fieldName) ((_field = Java.from((clazz instanceof Class ? clazz : clazz.class).getDeclaredFields()).find(function (f) f.getName() == fieldName)).setAccessible(true), _field);

function getFields(clazz) {
    _fields = Java.from((clazz = clazz instanceof Class ? clazz : clazz.class).getDeclaredFields());
    while (clazz = clazz.superclass) Array.prototype.push.apply(_fields, Java.from(clazz.getDeclaredFields()));
    return _fields;
}

function getMethods(clazz) {
    _methods = Java.from((clazz = clazz instanceof Class ? clazz : clazz.class).getDeclaredMethods());
    while (clazz = clazz.superclass) Array.prototype.push.apply(_methods, Java.from(clazz.getDeclaredMethods()));
    return _methods;
}

function getConstructor(clazz, index) ((_constructor = (clazz instanceof Class ? clazz : clazz.class).getDeclaredConstructors()[index]).setAccessible(true), _constructor);

function importPackage() Array.prototype.slice.call(arguments).forEach(function (e) _classes.filter(function (c) c.name.startsWith(e) && !c.name.contains("$")).forEach(function (c) eval(c.simpleName + "=StaticClass.forClass(c)")));

function openFolder(folder) Desktop.open(folder);

function toArray(object) (Array.isArray(object) ? object : [object]).filter(Boolean);

function canStep(stepHeight) {
    yaw = MovementUtils.getDirection(); bb = mc.thePlayer.getEntityBoundingBox(); _possiblePlaces = [];
    for (i = 0; (i += 0.125) <= stepHeight;) {
        if (!mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, bb.offset(0, i, 0)).isEmpty()) break
        if (mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, otherBB = bb.offset(-Math.sin(yaw) * 0.5, i, Math.cos(yaw) * 0.5)).isEmpty() && !mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, otherBB.offset(0, -0.125, 0)).isEmpty()) _possiblePlaces.push(i);
    }
    return _possiblePlaces.length && Math.max.apply(null, _possiblePlaces);
}

function callEvent(name, args) scriptManager.scripts.forEach(function (s) Java.from(_registeredModulesField.get(s)).forEach(function (m) _callEventMethod.invoke(m, name, args)));

function playSound(name, pitch) mc.getSoundHandler().playSound(PositionedSoundRecord.create(new ResourceLocation(name), pitch || 1));

function sendPacket(packet) mc.getNetHandler().getNetworkManager().sendPacket(packet);

function EditableEnum (target) {
    getField(Field, "modifiers").setInt(values = getField(target, "$VALUES"), values.getModifiers() & ~Modifier.FINAL);
    accessor = getMethod(Constructor, "acquireConstructorAccessor").invoke(getConstructor(target, 0));

    this.add = function (name) (!(array = Java.from(values.get(null))).some(function (v) {return v.getDisplayName().toLowerCase() == name.toLowerCase()}) && values.set(null, Java.to(array.concat(accessor.newInstance([name.toUpperCase(), 0, name])), "net.ccbluex.liquidbounce.features.module.ModuleCategory[]")), name);
    this.remove = function (name) (Java.from(values.get(null)).some(function (v, i, a) {if (v.getDisplayName().contains(name)) {a.splice(i, 1); return !values.set(null, Java.to(a, "net.ccbluex.liquidbounce.features.module.ModuleCategory[]"))}}), name);
    this.get = function () target;
    this.values = function () Java.from(values.get(null));
}

value = {
    createBlock: function (name, value) {
        return new BlockValue(name, value)
    },
    createBoolean: function (name, value) {
        return new BoolValue(name, value)
    },
    createFloat: function (name, value, min, max) {
        return new FloatValue(name, value, min, max)
    },
    createFont: function (name, value) {
        return new FontValue(name, value)
    },
    createInteger: function (name, value, min, max) {
        return new IntegerValue(name, value, min, max)
    },
    createList: function (name, values, value) {
        return new ListValue(name, values, value)
    },
    createText: function (name, value) {
        return new TextValue(name, value)
    }
}

/*---------------------*/
/* Custom functions v2 */
/*      By turtl       */
/*---------------------*/

function isInputUpOrDown() {
	    return mc.gameSettings.keyBindJump.pressed && mc.gameSettings.keyBindSneak.pressed ? false : mc.gameSettings.keyBindJump.pressed ? 1 : mc.gameSettings.keyBindSneak.pressed ? -1 : 0;
}
function isInputMoving() {
    return mc.gameSettings.keyBindLeft.pressed || mc.gameSettings.keyBindRight.pressed || mc.gameSettings.keyBindForward.pressed || mc.gameSettings.keyBindBack.pressed;
}
function isMoving2() {
    return mc.thePlayer.movementInput.moveForward || mc.thePlayer.movementInput.moveStrafe;
}
function getSpeed(entity) {
    if (entity == null || entity == undefined) entity = mc.thePlayer;
    return Math.sqrt(entity.motionX * entity.motionX + entity.motionZ * entity.motionZ);
}
function isHolding(item_instance, entity) {
    if (entity == null || entity == undefined) entity = mc.thePlayer;
    if (entity) return entity.inventory.getCurrentItem() ? entity.inventory.getCurrentItem().getItem() instanceof item : false;
    return mc.thePlayer.inventory.getStackInSlot(slot) != null && mc.thePlayer.inventory.getStackInSlot(slot).getItem() instanceof item;
}
function getMoveYaw() {
    var moveYaw = mc.thePlayer.rotationYaw;
    if (mc.thePlayer.moveForward != 0 && mc.thePlayer.moveStrafing == 0) {
        moveYaw += mc.thePlayer.moveForward > 0 ? 0 : 180;
    } else if (mc.thePlayer.moveForward != 0 && mc.thePlayer.moveStrafing != 0) {
        if (mc.thePlayer.moveForward > 0)
            moveYaw += mc.thePlayer.moveStrafing > 0 ? -45 : 45;
        else
            moveYaw -= mc.thePlayer.moveStrafing > 0 ? -45 : 45;
        moveYaw += mc.thePlayer.moveForward > 0 ? 0 : 180;
    } else if (mc.thePlayer.moveStrafing != 0 && mc.thePlayer.moveForward == 0) {
        moveYaw += mc.thePlayer.moveStrafing > 0 ? -90 : 90;
    }
    return moveYaw;
}
function setSpeed(speed, strafe) {
    if (!isMoving()) return;
    if (mc.thePlayer.onGround || (strafe && !mc.thePlayer.onGround)) {
        var yaw = getMoveYaw();
        mc.thePlayer.motionX = -Math.sin(Math.toRadians(yaw)) * speed;
        mc.thePlayer.motionZ = Math.cos(Math.toRadians(yaw)) * speed;
    }
}
function isMovingHorizontally2(entity) {
    if (entity == null || entity == undefined) entity = mc.thePlayer;
    return entity.posX - entity.lastTickPosX + entity.posZ - entity.lastTickPosZ != 0;
}
function isMovingVertically2(entity) {
    if (entity == null || entity == undefined) entity = mc.thePlayer;
    return entity.posY - entity.lastTickPosY != 0;
}
function getScaledWidth() {
    return new ScaledResolution(mc).getScaledWidth()
}
function getScaledHeight() {
    return new ScaledResolution(mc).getScaledHeight()
}
function getCenterOfBlockSide(e, n) {
    var t = new Vec3(e).addVector(.5, .5, .5),
        o = new Vec3(n.getDirectionVec());
    return t.addVector(.5 * o.xCoord, .5 * o.yCoord, .5 * o.zCoord)
}
function isBlockInReach(e, n) {
    var t = mc.playerController.getBlockReachDistance() + .25,
        o = e.getPositionEyes(1),
        i = getCenterOfBlockSide(n, getClosestBlockSide(o, n));
    return o.distanceTo(i) <= t
}
function getClosestBlockSide(e, n) {
    var t, o, i, r, a, c = null;
    for (a in EnumFacing.values()) o = getCenterOfBlockSide(n, t = EnumFacing.values()[a]), i = e.distanceTo(o), (null == c || i < c) && (c = i, r = t);
    return r
}

/*------------------------*/
/*  Custom functions v3   */
/*    By scorpion3013     */
/*------------------------*/

function setTargetRotation(yaw, pitch, ticksStay) {
    var targetRotation = new Rotation(yaw, pitch)
    RotationUtils.setTargetRotation(targetRotation, ticksStay)
}

function getClosestEntity() {
	var filteredEntites = []
	for (var i in mc.theWorld.loadedEntityList){
		var entities = mc.theWorld.loadedEntityList[i]

		if (entities instanceof EntityPlayer && entities != mc.thePlayer){
			filteredEntites.push(entities)
		}
	}
	filteredEntites.sort(function(a, b){
		var distanceA = mc.thePlayer.getDistanceToEntity(a)
		var distanceB = mc.thePlayer.getDistanceToEntity(b)

		return distanceB - distanceA;
	})
	return filteredEntites[filteredEntites.length - 1]
}

/*------------------------*/
/*  Custom functions v4   */
/*         By wtf         */
/*------------------------*/

function setTitle(title) {
    Display.setTitle(title)
}


/*------------------*/
/* Object functions */
/*   By CzechHek    */
/*------------------*/

//array.shuffle([boolean]) - randomizes elements order, overwrites and returns the array
//parameters: boolean - optional; false -> doesn't shuffle
Object.defineProperty(Array.prototype, "shuffle", {
    writable: true,
    value: function (bool) {
        if (bool === false || !(i = this.length)) return this;
        while (--i) {
            j = ~~(Math.random() * (i + 1));
            temp = this[i];
            this[i] = this[j];
            this[j] = temp;
        } return this;
    }
});

//array.find(function, [boolean]) - finds first element that fullfills a condition, returns the element or index of the element
//parameters: function - defines the condition, boolean - optional; true -> returns index
Object.defineProperty(Array.prototype, "find", {
    value: function (func, returnIndex) {
        for (i in this) if (func(this[i], i, this)) return returnIndex ? i : this[i];
        return returnIndex ? -1 : null;
    }
});

//array.includes(element) - checks if array has element, returns boolean
//parameters: element - element of the array to check for
Object.defineProperty(Array.prototype, "includes", {
    value: function (element) {
        return this.indexOf(element) != -1;
    }
});

//string.includes(string, [boolean]) - checks if string contains other string, case sensitive / insensitive, returns boolean
//parameters: string - string to check for, boolean - optional; true -> case insensitive search
Object.defineProperty(String.prototype, "includes", {
    value: function (string, ignoreCase) {
        return ignoreCase ? this.toString().toLowerCase().contains(string.toLowerCase()) : this.toString().contains(string);
    }
});

//array.remove(element) - removes element from array, returns if successful
//parameters: element - element to remove
Object.defineProperty(Array.prototype, "remove", {
    value: function (element) {
        return !!(~(index = this.indexOf(element)) && this.splice(index, 1));
    }
});

//array.last() - returns last element of array
Object.defineProperty(Array.prototype, "last", {
    value: function () {
        return this[this.length - 1];
    }
});

/*---------------------*/
/*    Java importing   */
/*  By TheFleksisCekcu */
/*---------------------*/

/*---------------------------------*/
/* something from org.lwjgl.opengl */
/*---------------------------------*/

["GL11","Display"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"org.lwjgl.opengl." + v + "\")")});

/*-----------------------*/
/* net.minecraft.block.* */
/*-----------------------*/

//net.minecraft.block.*
["Block","BlockAir","BlockAnvil","BlockBanner","BlockBarrier","BlockBasePressurePlate","BlockBeacon","BlockBed","BlockBeetroot","BlockBone","BlockBookshelf","BlockBreakable","BlockBrewingStand","BlockBush","BlockButton","BlockButtonStone","BlockButtonWood","BlockCactus","BlockCake","BlockCarpet","BlockCarrot","BlockCauldron","BlockChest","BlockChorusFlower","BlockChorusPlant","BlockClay","BlockCocoa","BlockColored","BlockCommandBlock","BlockCompressedPowered","BlockContainer","BlockCrops","BlockDaylightDetector","BlockDeadBush","BlockDirectional","BlockDirt","BlockDispenser","BlockDoor","BlockDoublePlant","BlockDoubleStoneSlab","BlockDoubleStoneSlabNew","BlockDoubleWoodSlab","BlockDragonEgg","BlockDropper","BlockDynamicLiquid","BlockEmptyDrops","BlockEnchantmentTable","BlockEnderChest","BlockEndGateway","BlockEndPortal","BlockEndPortalFrame","BlockEndRod","BlockEventData","BlockFalling","BlockFarmland","BlockFence","BlockFenceGate","BlockFire","BlockFlower","BlockFlowerPot","BlockFrostedIce","BlockFurnace","BlockGlass","BlockGlowstone","BlockGrass","BlockGrassPath","BlockGravel","BlockHalfStoneSlab","BlockHalfStoneSlabNew","BlockHalfWoodSlab","BlockHardenedClay","BlockHay","BlockHopper","BlockHorizontal","BlockHugeMushroom","BlockIce","BlockJukebox","BlockLadder","BlockLeaves","BlockLever","BlockLilyPad","BlockLiquid","BlockLog","BlockMagma","BlockMelon","BlockMobSpawner","BlockMushroom","BlockMycelium","BlockNetherBrick","BlockNetherrack","BlockNetherWart","BlockNewLeaf","BlockNewLog","BlockNote","BlockObserver","BlockObsidian","BlockOldLeaf","BlockOldLog","BlockOre","BlockPackedIce","BlockPane","BlockPistonBase","BlockPistonExtension","BlockPistonMoving","BlockPlanks","BlockPortal","BlockPotato","BlockPressurePlate","BlockPressurePlateWeighted","BlockPrismarine","BlockPumpkin","BlockPurpurSlab","BlockQuartz","BlockRail","BlockRailBase","BlockRailDetector","BlockRailPowered","BlockRedFlower","BlockRedSandstone","BlockRedstoneComparator","BlockRedstoneDiode","BlockRedstoneLight","BlockRedstoneOre","BlockRedstoneRepeater","BlockRedstoneTorch","BlockRedstoneWire","BlockReed","BlockRotatedPillar","BlockSand","BlockSandStone","BlockSapling","BlockSeaLantern","BlockShulkerBox","BlockSign","BlockSilverfish","BlockSkull","BlockSlab","BlockSlime","BlockSnow","BlockSnowBlock","BlockSoulSand","BlockSourceImpl","BlockSponge","BlockStainedGlass","BlockStainedGlassPane","BlockStairs","BlockStandingSign","BlockStaticLiquid","BlockStem","BlockStone","BlockStoneBrick","BlockStoneSlab","BlockStoneSlabNew","BlockStructure","BlockStructureVoid","BlockTallGrass","BlockTNT","BlockTorch","BlockTrapDoor","BlockTripWire","BlockTripWireHook","BlockVine","BlockWall","BlockWallSign","BlockWeb","BlockWoodSlab","BlockWorkbench","BlockYellowFlower","SoundType"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.block." + v + "\")")});

//net.minecraft.block.state.*
["IBlockBehaviors","IBlockProperties","IBlockState","BlockPistonStructureHelper","BlockStateBase","BlockStateContainer","BlockWorldState"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.block.state." + v + "\")")});

//net.minecraft.block.state.pattern.*
["BlockMatcher","BlockMaterialMatcher","BlockPattern","BlockStateMatcher","FactoryBlockPattern"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.block.state.pattern." + v + "\")")});

/*----------------------------*/
/* net.minecraft.client.gui.* */
/*----------------------------*/

//net.minecraft.client.gui.*
["ChatLine","FontRenderer","Gui","GuiBossOverlay","GuiButton","GuiButtonLanguage","GuiButtonRealmsProxy","GuiChat","GuiClickableScrolledSelectionListProxy","GuiCommandBlock","GuiConfirmOpenLink","GuiControls","GuiCreateFlatWorld","GuiCreateWorld","GuiCustomizeSkin","GuiCustomizeWorldScreen","GuiDisconnected","GuiDownloadTerrain","GuiEnchantment","GuiErrorScreen","GuiFlatPresets","GuiGameOver","GuiHopper","GuiIngame","GuiIngameMenu","GuiKeyBindingList","GuiLabel","GuiLanguage","GuiListButton","GuiListExtended","GuiListWorldSelection","GuiListWorldSelectionEntry","GuiLockIconButton","GuiMainMenu","GuiMemoryErrorScreen","GuiMerchant","GuiMultiplayer","GuiNewChat","GuiOptionButton","GuiOptions","GuiOptionSlider","GuiOptionsRowList","GuiOptionsRowList.Row","GuiOverlayDebug","GuiPageButtonList","GuiPlayerTabOverlay","GuiRepair","GuiResourcePackAvailable","GuiResourcePackList","GuiResourcePackSelected","GuiScreen","GuiScreenAddServer","GuiScreenBook","GuiScreenCustomizePresets","GuiScreenDemo","GuiScreenOptionsSounds","GuiScreenRealmsProxy","GuiScreenResourcePacks","GuiScreenServerList","GuiScreenWorking","GuiShareToLan","GuiSimpleScrolledSelectionListProxy","GuiSleepMP","GuiSlider","GuiSlot","GuiSlotRealmsProxy","GuiSnooper","GuiSpectator","GuiSubtitleOverlay","GuiTextField","GuiUtilRenderComponents","GuiVideoSettings","GuiWinGame","GuiWorldEdit","GuiWorldSelection","GuiYesNo","MapItemRenderer","ScaledResolution","ScreenChatOptions","ServerListEntryLanDetected","ServerListEntryLanScan","ServerListEntryNormal","GuiYesNoCallback","IProgressMeter","ServerSelectionList"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.client.gui." + v + "\")")});

//net.minecraft.client.gui.inventory.*
["CreativeCrafting","GuiBeacon","GuiBrewingStand","GuiChest","GuiContainer","GuiContainerCreative","GuiCrafting","GuiDispenser","GuiEditCommandBlockMinecart","GuiEditSign","GuiEditStructure","GuiFurnace","GuiInventory","GuiScreenHorseInventory","GuiShulkerBox"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.client.gui.inventory." + v + "\")")});

//net.minecraft.client.gui.spectator.*
["ISpectatorMenuObject","ISpectatorMenuRecipient","ISpectatorMenuView","BaseSpectatorGroup","PlayerMenuObject","SpectatorMenu"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.client.gui.spectator." + v + "\")")});

//net.minecraft.client.gui.spectator.categories.*
["SpectatorDetails","TeleportToPlayer","TeleportToTeam"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.client.gui.spectator.categories." + v + "\")")});

/*------------------------*/
/* net.minecraft.entity.* */
/*------------------------*/

//net.minecraft.entity.*
["IEntityLivingData","IEntityMultiPart","IEntityOwnable","IJumpingMount","IMerchant","INpc","IProjectile","IRangedAttackMob","EnumCreatureAttribute","EnumCreatureType","MoverType","Entity","EntityAgeable","EntityAreaEffectCloud","EntityBodyHelper","EntityCreature","EntityFlying","EntityHanging","EntityLeashKnot","EntityList","EntityLiving","EntityLivingBase","EntitySpawnPlacementRegistry","EntityTracker","EntityTrackerEntry","NpcMerchant","SharedMonsterAttributes"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity." + v + "\")")});

//net.minecraft.entity.ai.attributes.*
["IAttribute","IAttributeInstance","AbstractAttributeMap","AttributeMap","AttributeModifier","BaseAttribute","ModifiableAttributeInstance","RangedAttribute"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.ai.attributes." + v + "\")")});

//net.minecraft.entity.boss.*
["EntityDragon","EntityWither"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.boss." + v + "\")")});

//net.minecraft.entity.boss.dragon.phase.*
["IPhase","PhaseBase","PhaseChargingPlayer","PhaseDying","PhaseHoldingPattern","PhaseHover","PhaseLanding","PhaseLandingApproach","PhaseList","PhaseManager","PhaseSittingAttacking","PhaseSittingBase","PhaseSittingFlaming","PhaseSittingScanning","PhaseStrafePlayer","PhaseTakeoff"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.boss.dragon.phase." + v + "\")")});

//net.minecraft.entity.effect.*
["EntityLightningBolt","EntityWeatherEffect"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.effect." + v + "\")")});

//net.minecraft.entity.item.*
["EntityArmorStand","EntityBoat","EntityEnderCrystal","EntityEnderEye","EntityEnderPearl","EntityExpBottle","EntityFallingBlock","EntityFireworkRocket","EntityItem","EntityItemFrame","EntityMinecart","EntityMinecartChest","EntityMinecartCommandBlock","EntityMinecartContainer","EntityMinecartEmpty","EntityMinecartFurnace","EntityMinecartHopper","EntityMinecartMobSpawner","EntityMinecartTNT","EntityPainting","EntityTNTPrimed","EntityXPOrb"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.item." + v + "\")")});

//net.minecraft.entity.monster.*
["AbstractSkeleton","EntityBlaze","EntityCaveSpider","EntityCreeper","EntityElderGuardian","EntityEnderman","EntityEndermite","EntityEvoker","EntityGhast","EntityGiantZombie","EntityGolem","EntityGuardian","EntityHusk","EntityIronGolem","EntityMagmaCube","EntityMob","EntityPigZombie","EntityPolarBear","EntityShulker","EntitySilverfish","EntitySkeleton","EntitySlime","EntitySnowman","EntitySpider","EntityStray","EntityVex","EntityVindicator","EntityWitch","EntityWitherSkeleton","EntityZombie","EntityZombieVillager"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.monster." + v + "\")")});

//net.minecraft.entity.passive.*
["HorseArmorType","IAnimals","AbstractChestHorse","AbstractHorse","EntityAmbientCreature","EntityAnimal","EntityBat","EntityChicken","EntityCow","EntityDonkey","EntityHorse","EntityLlama","EntityMooshroom","EntityMule","EntityOcelot","EntityPig","EntityRabbit","EntitySheep","EntitySkeletonHorse","EntitySquid","EntityTameable","EntityVillager","EntityWaterMob","EntityWolf","EntityZombieHorse"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.passive." + v + "\")")});

//net.minecraft.entity.player.*
["EntityPlayer","EntityPlayerMP","InventoryPlayer","PlayerCapabilities"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.player." + v + "\")")});

//net.minecraft.entity.projectile.*
["EntityArrow","EntityDragonFireball","EntityEgg","EntityEvokerFangs","EntityFireball","EntityFishHook","EntityLargeFireball","EntityLlamaSpit","EntityPotion","EntityShulkerBullet","EntitySmallFireball","EntitySnowball","EntitySpectralArrow","EntityThrowable","EntityTippedArrow","EntityWitherSkull","ProjectileHelper"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.entity.projectile." + v + "\")")});

/*----------------------*/
/* net.minecraft.init.* */
/*----------------------*/

//net.minecraft.init.*
["Biomes","Blocks","Bootstrap","Enchantments","Items","MobEffects","PotionTypes","SoundEvents"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.init." + v + "\")")});

/*----------------------*/
/* net.minecraft.item.* */
/*----------------------*/

//net.minecraft.item.*
["IItemPropertyGetter","ItemMultiTexture","Item","ItemAir","ItemAnvilBlock","ItemAppleGold","ItemArmor","ItemArmorStand","ItemArrow","ItemAxe","ItemBanner","ItemBed","ItemBlock","ItemBlockSpecial","ItemBoat","ItemBook","ItemBow","ItemBucket","ItemBucketMilk","ItemCarrotOnAStick","ItemChorusFruit","ItemClock","ItemCloth","ItemCoal","ItemColored","ItemCompass","ItemDoor","ItemDye","ItemEgg","ItemElytra","ItemEmptyMap","ItemEnchantedBook","ItemEndCrystal","ItemEnderEye","ItemEnderPearl","ItemExpBottle","ItemFireball","ItemFirework","ItemFireworkCharge","ItemFishFood","ItemFishingRod","ItemFlintAndSteel","ItemFood","ItemGlassBottle","ItemHangingEntity","ItemHoe","ItemLead","ItemLeaves","ItemLilyPad","ItemLingeringPotion","ItemMap","ItemMapBase","ItemMinecart","ItemMonsterPlacer","ItemMultiTexture","ItemNameTag","ItemPickaxe","ItemPiston","ItemPotion","ItemRecord","ItemRedstone","ItemSaddle","ItemSeedFood","ItemSeeds","ItemShears","ItemShield","ItemShulkerBox","ItemSign","ItemSimpleFoiled","ItemSkull","ItemSlab","ItemSnow","ItemSnowball","ItemSoup","ItemSpade","ItemSpectralArrow","ItemSplashPotion","ItemStack","ItemSword","ItemTippedArrow","ItemTool","ItemWritableBook","ItemWrittenBook","EnumAction","EnumDyeColor","EnumRarity"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.item." + v + "\")")});

//net.minecraft.item.crafting.*
["CraftingManager","FurnaceRecipes","RecipeBookCloning","RecipeFireworks","RecipeRepairItem","RecipesArmorDyes","RecipesBanners","RecipesMapCloning","RecipesMapExtending","RecipeTippedArrow","ShapedRecipes","ShapelessRecipes","ShieldRecipes","ShulkerBoxRecipes"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.item.crafting." + v + "\")")});

/*-------------------------*/
/* net.minecraft.network.* */
/*-------------------------*/

//net.minecraft.network.*
["EnumConnectionState","EnumPacketDirection","INetHandler","NetHandlerPlayServer","NettyCompressionDecoder","NettyCompressionEncoder","NettyEncryptingDecoder","NettyEncryptingEncoder","NettyEncryptionTranslator","NetworkManager","NetworkSystem","Packet","PacketBuffer","PacketThreadUtil", "ServerStatusResponse","ThreadQuickExitException","handshake.INetHandlerHandshakeServer","handshake.client.C00Handshake","login.INetHandlerLoginClient","login.INetHandlerLoginServer","login.client.CPacketLoginStart","login.client.CPacketEncryptionResponse","login.server.SPacketDisconnect","login.server.SPacketEncryptionRequest","login.server.SPacketLoginSuccess","login.server.SPacketEnableCompression","play.INetHandlerPlayClient","play.INetHandlerPlayServer","play.client.CPacketKeepAlive","play.client.CPacketChatMessage","play.client.CPacketUseEntity","play.client.CPacketPlayer","play.client.CPacketPlayer.Position","play.client.CPacketPlayer.Rotation","play.client.CPacketPlayer.PositionRotation","play.client.CPacketPlayerDigging","play.client.CPacketHeldItemChange","play.client.CPacketAnimation","play.client.CPacketEntityAction","play.client.CPacketInput","play.client.CPacketCloseWindow","play.client.CPacketClickWindow","play.client.CPacketConfirmTransaction","play.client.CPacketCreativeInventoryAction","play.client.CPacketEnchantItem","play.client.CPacketUpdateSign","play.client.CPacketPlayerAbilities","play.client.CPacketTabComplete","play.client.CPacketClientSettings","play.client.CPacketClientStatus","play.client.CPacketCustomPayload","play.client.CPacketSpectate","play.client.CPacketResourcePackStatus","play.server.SPacketKeepAlive","play.server.SPacketJoinGame","play.server.SPacketChat","play.server.SPacketTimeUpdate","play.server.SPacketEntityEquipment","play.server.SPacketSpawnPosition","play.server.SPacketUpdateHealth","play.server.SPacketRespawn","play.server.SPacketPlayerPosLook","play.server.SPacketHeldItemChange","play.server.SPacketUseBed","play.server.SPacketAnimation","play.server.SPacketSpawnPlayer","play.server.SPacketCollectItem","play.server.SPacketSpawnObject","play.server.SPacketSpawnMob","play.server.SPacketSpawnPainting","play.server.SPacketSpawnExperienceOrb","play.server.SPacketEntityVelocity","play.server.SPacketDestroyEntities","play.server.SPacketEntity","play.server.SPacketEntityTeleport","play.server.SPacketEntityHeadLook","play.server.SPacketEntityStatus","play.server.SPacketEntityAttach","play.server.SPacketEntityMetadata","play.server.SPacketEntityEffect","play.server.SPacketRemoveEntityEffect","play.server.SPacketSetExperience","play.server.SPacketEntityProperties","play.server.SPacketChunkData","play.server.SPacketMultiBlockChange","play.server.SPacketBlockChange","play.server.SPacketBlockAction","play.server.SPacketBlockBreakAnim","play.server.SPacketExplosion","play.server.SPacketEffect","play.server.SPacketSoundEffect","play.server.SPacketParticles","play.server.SPacketChangeGameState","play.server.SPacketSpawnGlobalEntity","play.server.SPacketOpenWindow","play.server.SPacketCloseWindow","play.server.SPacketSetSlot","play.server.SPacketWindowItems","play.server.SPacketWindowProperty","play.server.SPacketConfirmTransaction","play.server.SPacketMaps","play.server.SPacketUpdateTileEntity","play.server.SPacketSignEditorOpen","play.server.SPacketStatistics","play.server.SPacketPlayerListItem","play.server.SPacketPlayerAbilities","play.server.SPacketTabComplete","play.server.SPacketScoreboardObjective","play.server.SPacketUpdateScore","play.server.SPacketTeams","play.server.SPacketCustomPayload","play.server.SPacketDisconnect","play.server.SPacketServerDifficulty","play.server.SPacketCombatEvent","play.server.SPacketCamera","play.server.SPacketWorldBorder","play.server.SPacketTitle","play.server.SPacketPlayerListHeaderFooter","play.server.SPacketResourcePackSend","rcon.RConConsoleSource","status.INetHandlerStatusClient","status.INetHandlerStatusServer","status.client.CPacketServerQuery","status.client.CPacketPing","status.server.SPacketServerInfo","status.server.SPacketPong"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.network." + v + "\")")});

/*----------------------*/
/* net.minecraft.util.* */
/*----------------------*/

//net.minecraft.util.*
["ChatAllowedCharacters","ClassInheritanceMultiMap","CombatEntry","CombatRules","CombatTracker","CooldownTracker","CooldownTrackerServer","CryptManager","DamageSource","EnchantmentNameParts","EntityDamageSource","EntityDamageSourceIndirect","EntitySelectors","EnumFacing","EnumParticleTypes","EnumTypeAdapterFactory","FoodStats","FrameTimer","HttpUtil","IJsonSerializable","IntegerCache","IntHashMap","IObjectIntIterable","IProgressUpdate","IStringSerializable","IThreadListener","ITickable","JsonUtils","LazyLoadBase","LoggingPrintStream","MapPopulator","MinecraftError","MouseFilter","MouseHelper","MovementInput","MovementInputFromOptions","ObjectIntIdentityMap","ResourceLocation","ScreenShotHelper","Session","Timer","TabCompleter","Tuple","TupleIntJsonSerializable","Util","WeightedRandom","WeightedRandom","WeightedSpawnerEntity"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.util." + v + "\")")});

//net.minecraft.util.text.*
["ITextComponent","Style","TextComponentBase","TextComponentScore","TextComponentSelector","TextComponentString","TextComponentTranslation","TextComponentUtils","TextFormatting","TextComponentTranslationFormatException"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.util.text." + v + "\")")});

//net.minecraft.util.math.*
["AxisAlignedBB","Cartesian","BlockPos","ChunkPos","MathHelper","RayTraceResult","Rotations","Vec2f","Vec3d","Vec3i"].forEach(function (v) {eval(v + "=Java.type(\"net.minecraft.util.math." + v + "\")")});

/*----------------------------------*/
/* net.ccbluex.liquidbounce.utils.* */
/*----------------------------------*/

//net.ccbluex.liquidbounce.utils.*
["CPSCounter","ClassUtils","ClientUtils","EntityUtils","InventoryUtils","MinecraftInstance","MovementUtils","PathUtils","RaycastUtils","RollingArrayLongBuffer","Rotation","RotationUtils","ServerUtils","SettingsUtils","TabUtils"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils." + v + "\")")});

//net.ccbluex.liquidbounce.utils.block.*
["BlockUtils","PlaceInfo"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.block." + v + "\")")});

//net.ccbluex.liquidbounce.utils.extensions.*
["BlockExtensionKt","PlayerExtensionKt"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.extensions." + v + "\")")});

//net.ccbluex.liquidbounce.utils.item.*
["ArmorComparator","ArmorPiece","ItemUtils"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.item." + v + "\")")});

//net.ccbluex.liquidbounce.utils.login.*
["LoginUtils","MinecraftAccount","UserUtils"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.login." + v + "\")")});

//net.ccbluex.liquidbounce.utils.misc.*
["FallingPlayer","HttpUtils","MiscUtils","RandomUtils","StringUtils"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.misc." + v + "\")")});

//net.ccbluex.liquidbounce.utils.render.*
["AnimationUtils","ColorUtils","IconUtils","ParticleUtils","RenderUtils"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.render." + v + "\")")});

//net.ccbluex.liquidbounce.utils.render.shader.*
["Shader","FramebufferShader"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.render.shader." + v + "\")")});

//net.ccbluex.liquidbounce.utils.render.shader.shaders.*
["BackgroundShader","GlowShader","OutlineShader"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.utils.render.shader.shaders." + v + "\")")});

//net.ccbluex.liquidbounce.utils.timer.*
["MSTimer","TickTimer","TimeUtils"].forEach(function (v) {eval(v + "=Java.type(\"net.ccbluex.liquidbounce.utils.timer." + v + "\")")});

/*---------------------------------*/
/* net.minecraft.client.renderer.* */
/*---------------------------------*/

["IImageBuffer","ItemMeshDefinition","StitcherException","ActiveRenderInfo","BannerTextures","BlockFluidRenderer","BlockModelRenderer","BlockModelShapes","BlockRendererDispatcher","ChestRenderer","ChunkRenderContainer","DestroyBlockProgress","EntityRenderer","GLAllocation","GlStateManager","ImageBufferDownload","InventoryEffectRenderer","ItemModelMesher","ItemRenderer","Matrix4f","OpenGlHelper","RegionRenderCacheBuilder","RenderGlobal","RenderHelper","RenderItem","RenderList","Tessellator","ThreadDownloadImageData","VboRenderList","Vector3d","ViewFrustum","WorldVertexBufferUploader"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.minecraft.client.renderer." + v + "\")")});

/*--------------------------------*/
/* net.ccbluex.liquidbounce.api.* */
/*--------------------------------*/

//net.ccbluex.liquidbounce.api.*
["IClassProvider","IExtractedFunctions","Wrapper"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.api." + v + "\")")});

//net.ccbluex.liquidbounce.api.enums.*
["BlockType","EnchantmentType","EnumFacingType","ItemType","MaterialType","StatType","WDefaultVertexFormats","WEnumHand"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.api.enums." + v + "\")")});

//net.ccbluex.liquidbounce.api.network.*
["IPacketBuffer"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.api.network." + v + "\")")});

//net.ccbluex.liquidbounce.api.util.*
["IWrappedArray","IWrappedFontRenderer","IWrappedGuiYesNoCallback","WrappedArray","WrappedCollection","WrappedCreativeTabs","WrappedGuiScreen","WrappedGuiSlot","WrappedGuiTextField","WrappedList","WrappedMutableCollection","WrappedMutableList","WrappedSet"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.api.util." + v + "\")")});

//net.ccbluex.liquidbounce.api.minecraft.util.*
["WVec3","WVec3i","IAxisAlignedBB","IChatComponentText","IChatStyle","IEnumFacing","IFoodStats","IIChatComponent","IMovementInput","IMovingObjectPosition","IResourceLocation","IScaledResolution","ISession","ITimer","WEnumChatFormatting","WMathHelper","WBlockPos"].forEach(function (v) {eval(v.split(".").pop() + "=Java.type(\"net.ccbluex.liquidbounce.api.minecraft.util." + v + "\")")});

/*----------------------------------*/
/* net.ccbluex.liquidbounce.value.* */
/*----------------------------------*/

//net.ccbluex.liquidbounce.value.*
["BlockValue", "BoolValue", "FloatValue", "FontValue", "IntegerValue", "ListValue", "TextValue", "Value"].forEach(function (v) {eval(v + "=Java.type(\"net.ccbluex.liquidbounce.value." + v + "\")")});

/*----------------*/ 
/* Used variables */
/*----------------*/
LiquidBounce = Java.type("net.ccbluex.liquidbounce.LiquidBounce"); 
classProvider = LiquidBounce.INSTANCE.getWrapper().getClassProvider(); 
Keyboard = Java.type("org.lwjgl.input.Keyboard"); 
Timer = Java.type("java.util.Timer"); 
List = Java.type("java.util.List"); 
ScriptModule = Java.type("net.ccbluex.liquidbounce.script.api.ScriptModule"); 
LinkedHashMap = Java.type("java.util.LinkedHashMap"); 
Constructor = Java.type("java.lang.reflect.Constructor");
Modifier = Java.type("java.lang.reflect.Modifier"); 
Field = Java.type("java.lang.reflect.Field"); 
ModuleCategory = Java.type("net.ccbluex.liquidbounce.features.module.ModuleCategory"); 
Script = Java.type("net.ccbluex.liquidbounce.script.Script"); 
File = Java.type("java.io.File"); 
JOptionPane = Java.type("javax.swing.JOptionPane"); 
Runnable = Java.type("java.lang.Runnable"); 
FileUtils = Java.type("org.apache.commons.io.FileUtils"); 
HttpUtils = Java.type("net.ccbluex.liquidbounce.utils.misc.HttpUtils"); 
Desktop = Java.type("java.awt.Desktop").getDesktop(); 
ClickGui = Java.type("net.ccbluex.liquidbounce.ui.client.clickgui.ClickGui"); 
Enchantment = Java.type("net.minecraft.enchantment.Enchantment"); 
ClassLoader = Java.type("java.lang.ClassLoader"); 
Thread = Java.type("java.lang.Thread"); 
Class = Java.type("java.lang.Class"); 
PositionedSoundRecord = Java.type("net.minecraft.client.audio.PositionedSoundRecord");
_classes = Java.from(getField(ClassLoader, "classes").get(Thread.currentThread().getContextClassLoader())); 
StaticClass = getMethod(_class = Class.forName("jdk.internal.dynalink.beans.StaticClass"), "forClass").invoke(null, _class); 
_class = undefined;
_registeredModulesField = getField(Script, "registeredModules"); 
_callEventMethod = getMethod(ScriptModule, "callEvent");
_isLatest = true;

/*-------------------*/
/* Module management */
/*    By CzechHek    */
/*-------------------*/

script.on("load", function () {
    module = toArray(module || {}); command = toArray(command || {});

    if (!API_V2) {
        script.scriptName = (scriptName || module[0].name || (command[0].commands && command[0].commands[0]) || "Script").toString();
        script.scriptAuthors = [(scriptAuthor || module[0].author || command[0].author || "Author").toString()];
        script.scriptVersion = (scriptVersion || module[0].version || command[0].version || "1.0").toString();
    }

    _updated = (_file = new File("logs/dreamsCoreUpdater.log")).exists() ? JSON.parse(FileUtils.readFileToString(_file)) : {}; FileUtils.forceDeleteOnExit(_file);

    try {
        ["DreamsCore", script.scriptName].forEach(function (n, i) {
            if ([coreAutoUpdate, scriptAutoUpdate][i] !== false && !_updated[n]) {
                if (_response = HttpUtils.get("https://dyskord.cc/check?name=" + n + "&ver=" + [coreVersion, script.scriptVersion][i])) {
                    HttpUtils.download("https://raw.githubusercontent.com/TheFleksisCekcu/DreamsCore/master/" + ["Core.lib", "Scripts/" + n + ".js"][i], [new File("LiquidBounce-1.12/scripts/DreamsCore.lib"), script.getScriptFile()][i]);
                    _isLatest = showMessage("Automatically updated " + n + " " + [coreVersion, script.scriptVersion][i] + " to " + _response, "Core Updater");
                } _updated[n] = true;
            }
        }); FileUtils.writeStringToFile(_file, JSON.stringify(_updated));
    } catch (e) {
        print("Couldn't check", script.scriptName, "for updates!", e);
        _updated[script.scriptName] = !(_isLatest = true);
    };

    if (!_isLatest) {
        scriptManager.scripts.remove(script);
        scriptManager.scripts.add(new Script(script.getScriptFile()));
        return
    } else _response = _isLatest = undefined;

    _categories = new EditableEnum(ModuleCategory);
    [module, command].forEach(function (c, i) c.forEach(function (v) [registerModule, registerCommand][i](v)));
    
    script.on("enable", function () {
        moduleManager.modules.forEach(function (m) m.name != "Script" && m.name == m.name.match(/[a-zA-Z_$][0-9a-zA-Z_$]*/) && eval(m.name + "Module=m"));
        [module, command].forEach(function (c) c.forEach(function (v) v.onLoad && v.onLoad()));
        if (Object.keys(_updated)[1] == script.scriptName) {
            LiquidBounce.clickGui = null;
            _interval = interval(250, function () {
                if (LiquidBounce.clickGui) {
                    LiquidBounce.clickGui = new (Java.extend(ClickGui)) () {
                        func_73866_w_: function () {
                            callEvent("clickGuiOpen");
                        },
                        func_146281_b: function () {
                            callEvent("clickGuiClosed");
                            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.clickGuiConfig);
                        }
                    }
                    LiquidBounce.fileManager.loadConfig(LiquidBounce.fileManager.clickGuiConfig);
                    _interval = _updated = _interval.cancel();
                    callEvent("clickGuiLoaded");
                }
            });
        } else _updated = undefined;
    });

    script.on("disable", function () [module, command].forEach(function (c) c.forEach(function (v) v.onUnload && v.onUnload())));
});